/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterators;
import java.math.BigDecimal;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.Functions.Function2;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.mydsl.myDsl.Model;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final Function1<Model, String> _function = (Model it) -> {
      StringConcatenation _builder = new StringConcatenation();
      String _join = IterableExtensions.join(it.getValues(), " + ");
      _builder.append(_join);
      _builder.append(" = ");
      final Function2<BigDecimal, BigDecimal, BigDecimal> _function_1 = (BigDecimal a, BigDecimal b) -> {
        return a.add(b);
      };
      BigDecimal _reduce = IterableExtensions.<BigDecimal>reduce(it.getValues(), _function_1);
      _builder.append(_reduce);
      return _builder.toString();
    };
    String _join = IteratorExtensions.join(IteratorExtensions.<Model, String>map(Iterators.<Model>filter(resource.getAllContents(), Model.class), _function));
    String _plus = ("Numbers: " + _join);
    fsa.generateFile("numbers.txt", _plus);
  }
}
